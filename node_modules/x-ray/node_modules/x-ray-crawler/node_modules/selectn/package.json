{
  "name": "selectn",
  "version": "0.9.6",
  "description": "Resolves deeply-nested object properties via dot or bracket-notation for Node.js and the browser.",
  "author": {
    "name": "Wil Moore III",
    "email": "wil.moore@wilmoore.com"
  },
  "keywords": [
    "object",
    "property",
    "access",
    "deep",
    "nested",
    "predicate",
    "functor"
  ],
  "main": "./index",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/wilmoore/selectn.git"
  },
  "component": {
    "scripts": {
      "selectn": "index.js"
    }
  },
  "devDependencies": {
    "mocha": "*",
    "chai": "*",
    "browserify": "~2.27.1",
    "mocha-phantomjs": "~3.1.1"
  },
  "jam": {
    "include": [
      "selectn.js",
      "Readme.md"
    ]
  },
  "volo": {
    "url": "https://raw.github.com/wilmoore/selectn/v{version}/selectn.js"
  },
  "readme": "# selectn\n\n[![Build Status](https://travis-ci.org/wilmoore/selectn.png?branch=master)](https://travis-ci.org/wilmoore/selectn)\n[![Build Status](https://david-dm.org/wilmoore/selectn.png)](https://david-dm.org/wilmoore/selectn)\n[![NPM version](https://badge.fury.io/js/selectn.png)](http://badge.fury.io/js/selectn)\n[![frozen](http://hughsk.github.io/stability-badges/dist/frozen.svg)](http://nodejs.org/api/documentation.html#documentation_stability_index)\n\n  Resolves deeply-nested object properties via dot or bracket-notation for [Node.js][] and the browser.\n\n#### So you can do:\n\n    selectn('info.name.full', person)\n\n#### instead of:\n\n    person && person.info && person.info.name && person.info.name.full\n\n## Features\n\n  - Avoids `if (obj && obj.a && obj.a.b && obj.a.b.c) { return obj.a.b.c; }`.\n  - Supports multiple levels of array nesting (i.e. `group[0].section.a.seat[3]`).\n  - Supports dashed key access (i.e. `stats.temperature-today`).\n  - Partial application supported.\n  - Functions generated by `selectn` can be passed to applicative functors like [Array.prototype.map][map] and [Array.prototype.filter][filter].\n  - Works where [typeof][] fails (i.e. deeply nested properties).\n  - ES5 and non-ES5 compatible.\n  - CommonJS, AMD, and legacy-global compatible.\n  - Provides access to global object if no object reference is given.\n\n## Non-Features\n\n  - No `eval` and [friends][Function].\n\n## Installation\n\n[component](http://component.io/wilmoore/selectn)\n\n    $ component install wilmoore/selectn\n\n[bower](http://sindresorhus.com/bower-components/)\n\n    $ bower install selectn\n\n[npm](https://npmjs.org/package/selectn)\n\n[![NPM](https://nodei.co/npm/selectn.png?downloads=true)](https://nodei.co/npm/selectn/)\n\n[jam](http://jamjs.org/packages/#/details/selectn)\n\n    $ jam install selectn\n\n[volo](http://volojs.org)\n\n    $ volo add wilmoore/selectn\n\n[global][]\n\n    <script src=\"https://raw.github.com/wilmoore/selectn/master/selectn.min.js\"></script>\n\n## Examples\n\n- [Nested property access](#nested-property-access)\n- [Dashed keys](#dashed-keys)\n- [Iterator](#iterator)\n- [Predicate](#predicate)\n- [Callback](#callback)\n\n### Nested property access\n\nGiven the following object:\n\n    var talk = {\n      info: { name: 'Go Ahead, Make a Mess' }\n    };\n\nApply the `selectn` function to the `path` and `object` parameters for error-free access to deeply nested properties.\n\n    selectn('info.name', talk);\n    // => 'Go Ahead, Make a Mess'\n\n### Dashed keys\n\nGiven the following object:\n\n    var talk = {\n      info: { 'attendee-count': 200 }\n    };\n\nApply the `selectn` function to the `path` and `object` parameters for error-free access to deeply nested properties.\n\n    selectn('info.attendee-count', talk);\n    // => 200\n\n### Iterator\n\nGiven the following list:\n\n    var talks  = [\n      { info: { name: 'Go Ahead, Make a Mess' }},\n      { info: { name: 'Silex Anatomy' }},\n      { info: { name: 'Unit Testing in Python' }},\n      { info: { name: 'Setting the Stage' }}\n    ];\n\nThe generated function can be used as a predicate for [map][]:\n\n    var query = selectn('info.name');\n    //=> [Function]\n\n    talks.map(query);\n    // => [ 'Go Ahead, Make a Mess', 'Silex Anatomy', 'Unit Testing in Python', 'Setting the Stage' ]\n\n### Predicate\n\nGiven the following object of language strings:\n\n    var language = [\n      { strings: { en: { name: 'english' } }},\n      { strings: { es: { name: 'spanish' } }},\n      { strings: { km: { name: 'khmer'   } }},\n      { strings: { es: { name: 'spanish' } }},\n    ];\n\nThe generated function can be used as a predicate for [filter][]:\n\n    var spanish = selectn('strings.es');\n    //=> [Function]\n\n    language.filter(spanish).length;\n    //=> 2\n\n### Callback\n\nYou expect the following JSON data from an XMLHttpRequest:\n\n    var data = { Client: { Message: { id: d50afb80-a6be-11e2-9e96-0800200c9a66 } } };\n\nAccess the `Client.Message.id` property and log the result to the console (using [promises][]):\n\n    $.ajax({...})\n      .then(selectn('Client.Message.id'))\n      .then(console.log.bind(console));\n\n    //=> d50afb80-a6be-11e2-9e96-0800200c9a66\n\n**NOTE**: Even if you don't use this methodology in production code, it can be a handy timesaver in terms of quick debugging.\n\n## Rationale\n\nIn larger, data-driven applications, there tends to be a need to do a lot of deep object access which can quickly lead to code like this:\n\n    var name;\n\n    if (contact && contact.info && contact.info.name) {\n      name = contact.info.name.full || 'unknown';\n    }\n\nThe following is much more concise:\n\n    var name = selectn('info.name.full')(contact) || 'unknown';\n\n## Neckbeard Info\n\nIn case you care about this sort of thing, we are able to do normal function application as well as partially apply when that is convenient due to `currying`.\n\n- `selectn('info.name.full', contact)` (normal function application)\n- `selectn('info.name.full')(contact)` (partial application without a `partial` helper like `Function.prototype.bind`)\n\nSince `selectn` is a 2-ary function, we don't need to use an external library for currying as the algorithm is simple.\n\n## Alternatives\n\n- You can use [typeof][]; however, [typeof][] only \"appears\" to work due to the way the global scope is _implied_.\n- Other solutions involve [eval][] and/or [Function][] ([`eval`][note] in disguise).\n\n## Inspiration\n\n- [to-function][]\n- [reach][]\n- [dref][]\n\n## License\n\n  MIT\n\n\n\n[to-function]: https://github.com/component/to-function\n[reach]:       https://github.com/spumko/hoek#reachobj-chain\n[dref]:        https://github.com/crcn/dref.js\n[Function]:    https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Function\n[eval]:        https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/eval\n[note]:        https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Operators/Member_Operators#Note_on_eval\n[typeof]:      https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Operators/typeof\n[promises]:    http://promises-aplus.github.io/promises-spec/\n[map]:         https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\n[filter]:      https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\n[global]:      http://yuiblog.com/blog/2006/06/01/global-domination/\n[Node.js]:     http://nodejs.org\n\n",
  "readmeFilename": "Readme.md",
  "bugs": {
    "url": "https://github.com/wilmoore/selectn/issues"
  },
  "_id": "selectn@0.9.6",
  "dist": {
    "shasum": "bd873a556d18f96d8515fc91503ec6ff398ff9a2",
    "tarball": "http://registry.npmjs.org/selectn/-/selectn-0.9.6.tgz"
  },
  "_from": "selectn@>=0.9.6 <0.10.0",
  "_npmVersion": "1.3.11",
  "_npmUser": {
    "name": "wilmoore",
    "email": "wil.moore@wilmoore.com"
  },
  "maintainers": [
    {
      "name": "wilmoore",
      "email": "wil.moore@wilmoore.com"
    }
  ],
  "directories": {},
  "_shasum": "bd873a556d18f96d8515fc91503ec6ff398ff9a2",
  "_resolved": "https://registry.npmjs.org/selectn/-/selectn-0.9.6.tgz",
  "homepage": "https://github.com/wilmoore/selectn#readme"
}
